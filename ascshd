#!/usr/bin/env ruby

require 'socket'
require 'json'

$hostname = 'localhost'
$port = 27839
$ascsh_bin = ENV["AIR_HOME"]+"/bin/ascsh"

class Server
  ASCSH_PROMPT = "\n(ascsh)"
  @output_buffer = ""
  def self.read_until_prompt(proc)
    @output_buffer << proc.readpartial(256) until
      @output_buffer.include? ASCSH_PROMPT
    output, @output_buffer =
      @output_buffer.split(ASCSH_PROMPT, 2)
    output
  rescue EOFError
    raise "Error reading ascsh output"
  end

  # Server feeds the ascsh process
  def self.ascshd_server
    puts "Starting aschd server, port #{$port}, pid #{Process.pid}"
    server = TCPServer.open($port)
    ascsh_process = IO.popen($ascsh_bin+" 2>&1", "r+")
    read_until_prompt(ascsh_process)

    loop {
      client = server.accept
      cmd = client.gets
      next if (cmd==nil || cmd.length<1)
      cmd.strip!

      #puts "got cmd:\n#{cmd.split('||')}"
      case cmd
        when "kill"
        puts "ascshd server exiting"
        ascsh_process.close
        ascsh_process = nil
        exit
      else
        ascsh_process.puts(cmd)
        result = read_until_prompt(ascsh_process)
        #puts "Result:\n #{result}"
        client.puts JSON.generate result.split("\n")
        client.close
      end

    }
  end
end

# Check args
if (ARGV.length==0) then
  puts "Usage: ascshd [kill] [mxmlc <args>] [compc <args>]"
  exit
end

raise "Cannot find ascsh at \$AIR_HOME/bin/ascsh" unless File.exist?($ascsh_bin)

is_kill = ARGV[0]=='kill'
raise "Cannot -kill with other operations" if (is_kill && ARGV.length>1)
raise "Invalid argument #{ARGV[0]}" unless ["kill", "mxmlc", "compc"].include?(ARGV[0])

# Check if server is running, start it if necessary
begin
  s = TCPSocket.open($hostname, $port)
rescue Errno::ECONNREFUSED
  if is_kill then
    puts "ascshd is not running."
    exit
  end
  fork do
    Server.ascshd_server()
  end
  sleep 0.25 # wait for server to start
  s = TCPSocket.open($hostname, $port)
end

# Send commandline args to server
if is_kill then
  puts "Killing server..."
  s.puts "kill"
  s.close
  exit
end

# Escape input args for joining with ' '
args = ARGV.map { |arg|
  if (arg.match(/\s/)!=nil) then
    puts "Mapping: #{arg}"
    '"'+arg.gsub(/\\/, "\\\\\\").gsub(/"/, '\\\"')+'"'
  else
    arg
  end
}
s.puts args.join(' ')
response = s.gets
puts JSON.parse(response).join("\n")
s.close
